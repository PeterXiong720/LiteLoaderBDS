// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "reflection.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class CerealSchemaUpgrade {

#define AFTER_EXTRA

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_CEREALSCHEMAUPGRADE
public:
    class CerealSchemaUpgrade& operator=(class CerealSchemaUpgrade const &) = delete;
    CerealSchemaUpgrade(class CerealSchemaUpgrade const &) = delete;
    CerealSchemaUpgrade() = delete;
#endif

public:
    /*0*/ virtual ~CerealSchemaUpgrade();
    /*
    inline bool upgradeToNext(class rapidjson::GenericDocument<struct rapidjson::UTF8<char>, class rapidjson::MemoryPoolAllocator<class rapidjson::CrtAllocator>, class rapidjson::CrtAllocator> & a0) const{
        bool (CerealSchemaUpgrade::*rv)(class rapidjson::GenericDocument<struct rapidjson::UTF8<char>, class rapidjson::MemoryPoolAllocator<class rapidjson::CrtAllocator>, class rapidjson::CrtAllocator> &) const;
        *((void**)&rv) = dlsym("?upgradeToNext@CerealSchemaUpgrade@@UEBA_NAEAV?$GenericDocument@U?$UTF8@D@rapidjson@@V?$MemoryPoolAllocator@VCrtAllocator@rapidjson@@@2@VCrtAllocator@2@@rapidjson@@@Z");
        return (this->*rv)(std::forward<class rapidjson::GenericDocument<struct rapidjson::UTF8<char>, class rapidjson::MemoryPoolAllocator<class rapidjson::CrtAllocator>, class rapidjson::CrtAllocator> &>(a0));
    }
    inline  ~CerealSchemaUpgrade(){
         (CerealSchemaUpgrade::*rv)();
        *((void**)&rv) = dlsym("??1CerealSchemaUpgrade@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI CerealSchemaUpgrade(class SemVersion, std::string const &, std::string const &);
    MCAPI void bindLegacySchema(class reflection::SchemaFactory &);
    MCAPI class SemVersion const & getPreviousVersion() const;
    MCAPI std::string const & getPreviousVersionString() const;
    MCAPI std::string const & getSchemaKey() const;
    MCAPI class SemVersion const & getTargetVersion() const;
    MCAPI void registerLegacySchema();
    MCAPI void setPreviousVersion(class SemVersion const &);

protected:

private:

};