// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

class ScriptScoreboard {

#define AFTER_EXTRA

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SCRIPTSCOREBOARD
public:
    ScriptScoreboard() = delete;
#endif

public:
    /*
    inline  ~ScriptScoreboard(){
         (ScriptScoreboard::*rv)();
        *((void**)&rv) = dlsym("??1ScriptScoreboard@@UEAA@XZ");
        return (this->*rv)();
    }
    inline enum EventResult onObjectiveRemoved(std::string const & a0){
        enum EventResult (ScriptScoreboard::*rv)(std::string const &);
        *((void**)&rv) = dlsym("?onObjectiveRemoved@ScriptScoreboard@@UEAA?AW4EventResult@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z");
        return (this->*rv)(std::forward<std::string const &>(a0));
    }
    inline enum EventResult onScoreboardIdentityRemoved(struct ScoreboardId const & a0){
        enum EventResult (ScriptScoreboard::*rv)(struct ScoreboardId const &);
        *((void**)&rv) = dlsym("?onScoreboardIdentityRemoved@ScriptScoreboard@@UEAA?AW4EventResult@@AEBUScoreboardId@@@Z");
        return (this->*rv)(std::forward<struct ScoreboardId const &>(a0));
    }
    */
    MCAPI ScriptScoreboard(class ScriptScoreboard const &);
    MCAPI ScriptScoreboard(class Scoreboard &, class Level &, class Scripting::WeakLifetimeScope const &);
    MCAPI class Scripting::Result<class Scripting::StrongTypedObjectHandle<class ScriptScoreboardObjective>> getObjective(std::string const &);
    MCAPI class Scripting::Result<std::vector<class Scripting::StrongTypedObjectHandle<class ScriptScoreboardObjective>>> getObjectives();
    MCAPI class Scripting::StrongTypedObjectHandle<class ScriptScoreboardIdentity> getOrCreateScoreboardIdentity(class IdentityDefinition const &);
    MCAPI class Scripting::Result<std::vector<class Scripting::StrongTypedObjectHandle<class ScriptScoreboardIdentity>>> getParticipants();
    MCAPI class ScriptScoreboard & operator=(class ScriptScoreboard const &);
    MCAPI class Objective * tryGetObjective(std::string const &);
    MCAPI static class Scripting::ClassBindingBuilder<class ScriptScoreboard> bind(struct Scripting::Version);

protected:

private:
    MCAPI class Scripting::StrongTypedObjectHandle<class ScriptScoreboardObjective> _getOrCreateScoreboardObjective(class Objective &);

};