// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Bedrock.hpp"
#include "ServerPlayer.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "ScriptNavigationResult.hpp"

#undef BEFORE_EXTRA

class SimulatedPlayer : public ServerPlayer {

#define AFTER_EXTRA
// Add Member There
public:
    LIAPI bool simulateDestory();
    LIAPI bool simulateUseItem();
    LIAPI static class SimulatedPlayer* create(std::string const& name, class BlockPos const& position, class AutomaticID<class Dimension, int> dimensionId = 0);
    LIAPI static class SimulatedPlayer* create(std::string const& name, class AutomaticID<class Dimension, int> dimensionId = 0);

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SIMULATEDPLAYER
public:
    class SimulatedPlayer& operator=(class SimulatedPlayer const &) = delete;
    SimulatedPlayer(class SimulatedPlayer const &) = delete;
    SimulatedPlayer() = delete;
#endif

public:
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    /*14*/ virtual ~SimulatedPlayer();
    /*20*/ virtual bool isRuntimePredictedMovementEnabled() const;
    /*40*/ virtual void __unk_vfn_40();
    /*60*/ virtual void __unk_vfn_60();
    /*67*/ virtual void __unk_vfn_67();
    /*81*/ virtual void __unk_vfn_81();
    /*87*/ virtual void __unk_vfn_87();
    /*88*/ virtual void playerTouch(class Player &);
    /*95*/ virtual void __unk_vfn_95();
    /*98*/ virtual void __unk_vfn_98();
    /*105*/ virtual void __unk_vfn_105();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*109*/ virtual void __unk_vfn_109();
    /*113*/ virtual class Actor * findAttackTarget();
    /*120*/ virtual void onTame();
    /*121*/ virtual void onFailedTame();
    /*130*/ virtual void vehicleLanded(class Vec3 const &, class Vec3 const &);
    /*171*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*181*/ virtual void __unk_vfn_181();
    /*192*/ virtual bool canPickupItem(class ItemStack const &) const;
    /*193*/ virtual bool canBePulledIntoVehicle() const;
    /*195*/ virtual void __unk_vfn_195();
    /*197*/ virtual void sendMotionPacketIfNeeded();
    /*198*/ virtual bool canSynchronizeNewEntity() const;
    /*220*/ virtual void __unk_vfn_220();
    /*221*/ virtual void __unk_vfn_221();
    /*237*/ virtual bool canDestroyBlock(class Block const &) const;
    /*238*/ virtual void setAuxValue(int);
    /*246*/ virtual void __unk_vfn_246();
    /*249*/ virtual void __unk_vfn_249();
    /*259*/ virtual void onPush(class Actor &);
    /*263*/ virtual bool _shouldProvideFeedbackOnHandContainerItemSet(enum HandSlot, class ItemStack const &) const;
    /*267*/ virtual void __unk_vfn_267();
    /*275*/ virtual void __unk_vfn_275();
    /*284*/ virtual void __unk_vfn_284();
    /*286*/ virtual void spawnAnim();
    /*299*/ virtual void aiStep();
    /*312*/ virtual void __unk_vfn_312();
    /*314*/ virtual bool isAlliedTo(class Mob *);
    /*316*/ virtual void __unk_vfn_316();
    /*343*/ virtual void onBorn(class Actor &, class Actor &);
    /*348*/ virtual float _getWalkTargetValue(class BlockPos const &);
    /*349*/ virtual bool canExistWhenDisallowMob() const;
    /*350*/ virtual void __unk_vfn_350();
    /*358*/ virtual void updateAi();
    /*360*/ virtual void _serverAiMobStep();
    /*364*/ virtual void __unk_vfn_364();
    /*374*/ virtual void __unk_vfn_374();
    /*380*/ virtual void __unk_vfn_380();
    /*381*/ virtual void __unk_vfn_381();
    /*383*/ virtual void __unk_vfn_383();
    /*384*/ virtual void __unk_vfn_384();
    /*389*/ virtual void __unk_vfn_389();
    /*390*/ virtual void __unk_vfn_390();
    /*393*/ virtual void __unk_vfn_393();
    /*394*/ virtual void __unk_vfn_394();
    /*396*/ virtual void __unk_vfn_396();
    /*397*/ virtual void __unk_vfn_397();
    /*406*/ virtual void __unk_vfn_406();
    /*407*/ virtual void __unk_vfn_407();
    /*411*/ virtual void __unk_vfn_411();
    /*446*/ virtual void __unk_vfn_446();
    /*447*/ virtual std::string getXuid() const;
    /*448*/ virtual struct PlayerMovementSettings const & getMovementSettings() const;
    /*450*/ virtual class std::shared_ptr<class ChunkViewSource> _createChunkSource(class ChunkSource &);
    /*451*/ virtual int _getSpawnChunkLimit() const;
    /*452*/ virtual void _updateChunkPublisherView(class Vec3 const &, float);
    /*
    inline bool useNewAi() const{
        bool (SimulatedPlayer::*rv)() const;
        *((void**)&rv) = dlsym("?useNewAi@SimulatedPlayer@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isSimulated() const{
        bool (SimulatedPlayer::*rv)() const;
        *((void**)&rv) = dlsym("?isSimulated@SimulatedPlayer@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI SimulatedPlayer(class Level &, class PacketSender &, class NetworkHandler &, class ClientBlobCache::Server::ActiveTransfersManager &, enum GameType, class NetworkIdentifier const &, unsigned char, class std::function<void (class ServerPlayer &)>, class mce::UUID, std::string const &, std::unique_ptr<class Certificate>, int, bool, class EntityContext &);
    MCAPI class Bedrock::NonOwnerPointer<class gametest::BaseGameTestHelper> getGameTestHelper() const;
    MCAPI void preAiStep();
    MCAPI void setGameTestHelper(class Bedrock::NonOwnerPointer<class gametest::BaseGameTestHelper>);
    MCAPI void setXuid(std::string const &);
    MCAPI bool simulateAttack(class Actor *);
    MCAPI bool simulateAttack();
    MCAPI bool simulateDestroyBlock(class BlockPos const &, enum ScriptFacing);
    MCAPI void simulateDisconnect();
    MCAPI bool simulateGiveItem(class ItemStack &, bool);
    MCAPI bool simulateInteract(class Actor &);
    MCAPI bool simulateInteract(class BlockPos const &, enum ScriptFacing);
    MCAPI bool simulateInteract();
    MCAPI bool simulateJump();
    MCAPI void simulateLocalMove(class Vec3 const &, float);
    MCAPI void simulateLookAt(class Actor &);
    MCAPI void simulateLookAt(class BlockPos const &);
    MCAPI void simulateLookAt(class Vec3 const &);
    MCAPI void simulateMoveToLocation(class Vec3 const &, float);
    MCAPI struct ScriptNavigationResult simulateNavigateToEntity(class Actor &, float);
    MCAPI struct ScriptNavigationResult simulateNavigateToLocation(class Vec3 const &, float);
    MCAPI void simulateNavigateToLocations(std::vector<class Vec3> &&, float);
    MCAPI void simulateSetBodyRotation(float);
    MCAPI bool simulateSetItem(class ItemStack &, bool, int);
    MCAPI void simulateStopDestroyingBlock();
    MCAPI void simulateStopInteracting();
    MCAPI void simulateStopMoving();
    MCAPI void simulateStopUsingItem();
    MCAPI bool simulateUseItem(class ItemStack &);
    MCAPI bool simulateUseItemInSlot(int);
    MCAPI bool simulateUseItemInSlotOnBlock(int, class BlockPos const &, enum ScriptFacing, class Vec3 const &);
    MCAPI bool simulateUseItemOnBlock(class ItemStack &, class BlockPos const &, enum ScriptFacing, class Vec3 const &);
    MCAPI void simulateWorldMove(class Vec3 const &, float);
    MCAPI static class SimulatedPlayer * create(std::string const &, class BlockPos const &, class AutomaticID<class Dimension, int>, class gsl::not_null<class Bedrock::NonOwnerPointer<class ServerNetworkHandler>>, std::string const &);
    MCAPI static class SimulatedPlayer * tryGetFromEntity(class EntityContext &, bool);

protected:

private:
    MCAPI void _addMoveComponent();
    MCAPI struct ScriptNavigationResult _createNavigationResult(class NavigationComponent *) const;
    MCAPI float _getInputSpeed();
    MCAPI void _startCooldown();
    MCAPI bool _trySwing();
    MCAPI void _updateMovement();

};